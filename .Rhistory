xlab="")
# Density of the averages of samples
lines(density(row_means))
# Theoretical center of distribution
abline(v=1/lambda, col="red")
# Theoretical density of the averages of samples
xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red", lty=2)
# Legend of plotting
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("black", "red"))
# Plotting the histogram of averages
hist(row_means, breaks=50, prob=TRUE,
main="Distribution of averages of samples.
Exponential distribution with lambda=0.2",
xlab="")
# Density of the averages of samples
lines(density(row_means))
# Theoretical center of distribution
abline(v=1/lambda, col="red")
# Theoretical density of the averages of samples
xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red", lty=2)
# Legend of plotting
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("black", "red"))
# Plotting the histogram of averages
hist(row_means, breaks=50, prob=TRUE,
main="Fig. 1. Distribution of averages of samples.
Exponential distribution with lambda=0.2",
xlab="")
# Density of the averages of samples
lines(density(row_means))
# Theoretical center of distribution
abline(v=1/lambda, col="red")
# Theoretical density of the averages of samples
xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red", lty=2)
# Legend of plotting
legend('topright', c("Simulation", "Theoretical"), lty=c(1,2), col=c("blue", "red"))
# Plotting the histogram of averages
hist(row_means, breaks=50, prob=TRUE,
main="Fig. 1. Distribution of averages of samples.
Exponential distribution with lambda=0.2",
xlab="")
# Density of the averages of samples
lines(density(row_means))
# Theoretical center of distribution
abline(v=1/lambda, col="red")
# Theoretical density of the averages of samples
xfit <- seq(min(row_means), max(row_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red", lty=2)
# Legend of plotting
legend('topright', c("Simulation", "Theoretical"), lty=c(1,2), col=c("black", "red"))
qqnorm(row_means); qqline(row_means)
# Evaluating the coverage of the confidence interval
lambda_vals <- seq(4, 6, by=0.01)
coverage <- sapply(lambda_vals, function(lamb) {
mu_hats <- rowMeans(matrix(rexp(sample_size*num_sim, rate=0.2),
num_sim, sample_size))
ll <- mu_hats - qnorm(0.975) * sqrt(1/lambda**2/sample_size)
ul <- mu_hats + qnorm(0.975) * sqrt(1/lambda**2/sample_size)
mean(ll < lamb & ul > lamb)
})
library(ggplot2)
qplot(lambda_vals, coverage) + geom_hline(yintercept=0.95)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(lambda_vals, coverage) + geom_hline(yintercept=0.95)
library(datasets)
# Exploratory Data Analysis: basic features of the Data
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams (mg)") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
fit <- lm(len ~ dose + supp, data=ToothGrowth)
summary(fit)
fit$coefficients[[1]]
fit$coefficients[[1]]
fit$coefficients[[1]]
fit$coefficients[[2]]
fit$coefficients[[2]]
abs(fit$coefficients[[3]])
abs(fit$coefficients[[3]])
confint(fit)
q()
swirl()
library(swirl)
swirl()
.8
0.64
0.64
mypdf
integrate(mypdf)
integrate
integrate(mypdf,0,1.6)
4
2
1.4142
1.41
info()
2
2*.5
1.4
1.41
1.4142
info()
nxt()
0.8
1.414214
equiv_val(0.000997)
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
3.5
yes
.5
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
0.94208
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
qnorm(.10)
0
qnorm(.975,mean=3,sd=2)
6.92
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50)
.53
.53
ppois(3,2.5 * 4)
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
myplot(2)
omnitest(correctExpr='myplot(20)')
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- 7*15.34^2 + 20*18.23^2
ns <- 8+21-2
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
<- sqrt((9*var(g1)+9*var(g2))/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
num <- (15.34^2/8 + 18.23^2/21)^2
t.test(g2,g1,paired=TRUE)$conf
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
num <- (15.34^2/8 + 18.23^2/21)^2
t.test(g2,g1,paired=FALSE,var.equal=TRUE)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1
2
swirl()
swirl()
swirl()
q()
swirl()
library(swirl)
swirl()
q()
data(mtcars)
mtcars <- data(mtcars)
mtcars
data(mtcars)
mcars
mtcars
q()
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
q()
install.packages("UsingR")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
library(UsingR)
data(galton)
library(reshape)
install.packages("reshape")
library(reshape)
long <- melt(galton)
long
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + geom_histogram(colour = "black", binwidth=1)
g
q()
g <- g + geom_histogram(colour = "black", binwidth=1)
library(ggplot2)
g <- g + geom_histogram(colour = "black", binwidth=1)
g
library(reshape)
long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
library(ggplot)
library(ggplot2)
g <- ggplot(long, aes(x = value, fill = variable))
long <- melt(galton)
library(reshape)
g <- ggplot(long, aes(x = value, fill = variable))
g
g <- ggplot(long, aes(x = value, fill = variable))
g
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
library(knitr)
install.packages("knitr)
install.packages("knitr")
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
swirl()
library(swirl)
swirl()
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
fit$coef vector, fit$coef[2]
fit$coef vector, fit$coef[2]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
f <- lm(y ~ x)
summary(f)
data(mtcars)
y<-mtcars$mpg
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
summary(mtcars)
x
x=mean(3)
x
q()
swirl()
library(swirl)
swirl()
manipulate
swirl
swirl()
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma 
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child) 
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
q()
q()
q()
q()
q()
q()
q()
library(car)
library("car")
data(mtcars)
mtcars
summary(mtcars)
attach(mtcars)
y1 <- mpg[am == 0]
y2 <- mpg[am == 1]
x1 <- t.test(y1, mu = 0)
x2 <- t.test(y2, mu = 0)
x1$conf.int
q()
install_packages("kohonen")
install_package("kohonen")
install_library("kohonen")
install.packages("kohonen")
install.packages("som")
install.packages("wccsom")
install.packages("FactoMineR")
install.packages("Rcpp")
install.packages("RColorBrewer")
install.packages("Cairo")
install.packages("sp")
q()
install.packages("ggplot2")
install.packages("ggplot")
q()
q()
swirl()
library(swirl)
swirl()
q()
install.packages("ggplot2")
install.packages("Rcpp")
q()
swirl()
library(swirl)
set_lesson(""C:\Users\Larry\DataScience-Coursera\swirl_courses-master\Regression_Models\Introduction\lesson.yaml"")
set_lesson("C:\Users\Larry\DataScience-Coursera\swirl_courses-master\Regression_Models\Introduction\lesson.yaml")
set_lesson(""C:\Users\Larry\DataScience-Coursera\swirl_courses-master\Regression_Models\Introduction\lesson.yaml"")
set_lesson("C:/Users/Larry/DataScience-Coursera/swirl_courses-master/Regression_Models/Introduction/lesson.yaml")
set_lesson("C:/Users/Larry/DataScience-Coursera/swirl_courses-master/Regression_Models/Introduction/lesson.yaml")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varEst+varRes)
: efit <- lm(accel ~ mag+dist, attenu)
: efit <- lm(accel ~ mag+dist, attenu)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
swirl()
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma 
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child) 
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ . - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ . - 1, trees2)
lapply(list(fit, fit2), coef)
0
q()
q()
setwd(""C:\Users\Larry\DataScience-Coursera\DevDataProd\Project\final"")
setwd("C:\\Users\\Larry\\DataScience-Coursera\\DevDataProd\\Project\\final")
addApp()
addAp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cor
corr
output$corr
q()
